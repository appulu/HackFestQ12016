;// Gradle Build script for the Price Service Project

import static org.gradle.api.JavaVersion.VERSION_1_7

apply plugin: 'java'
apply plugin: 'idea'
apply plugin: 'fatjar'
apply plugin: 'jacoco'
apply plugin: 'pmd'
apply plugin: "sonar-runner"
apply plugin: 'application'
apply plugin: 'maven'

sourceCompatibility = VERSION_1_7
targetCompatibility = VERSION_1_7

buildscript {

    repositories {
    		maven {
		        credentials {
            		    username ''
		            password ''
        		}

        		url "https://localhost/nexus/content/repositories/jcentral"
    		}  
            maven {
		        credentials {
            		    username ''
		            password ''
        		}
        		url "https://localhost/nexus/content/repositories/central"
    		}        		
    }

    dependencies {
        classpath "eu.appsatori:gradle-fatjar-plugin:0.2"
		classpath "org.codehaus.groovy:groovy-all:2.1.3"
    }
}


repositories {
    maven {
		        credentials {
            		    username ''
		            password ''
        		}
    	url "https://localhost/nexus/content/repositories/central"
    }
    maven {
		        credentials {
            		    username ''
		            password ''
        		}
    	url "https://localhost/nexus/content/repositories/thirdparty"
    }   
}


allprojects {
    project.version = '1.0'
}

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

dependencies {

    compile "com.yammer.dropwizard:dropwizard-core:0.6.2"
    compile "org.codehaus.groovy:groovy-all:2.1.3"
    compile "com.wordnik:swagger-core_2.10:1.3.0"
    compile "com.wordnik:swagger-annotations_2.10:1.3.0"
    compile "com.wordnik:swagger-jaxrs_2.10:1.3.0"
    compile "org.picocontainer:picocontainer:2.14.3"
    compile "com.yammer.metrics:metrics-core:2.2.0"
    compile "com.yammer.metrics:metrics-annotation:2.2.0"
    compile "com.yammer.metrics:metrics-graphite:2.2.0"
    compile "com.yammer.metrics:metrics-httpclient:2.2.0"
    compile "com.yammer.metrics:metrics-jersey:2.2.0"
    compile "com.yammer.metrics:metrics-jetty:2.2.0"
    compile "com.yammer.metrics:metrics-logback:2.2.0"
    compile "com.yammer.metrics:metrics-servlet:2.2.0"
    compile "com.fasterxml.jackson.module:jackson-module-afterburner:2.1.5"
    compile "com.fasterxml.jackson.module:jackson-module-jaxb-annotations:2.1.4"
    compile "com.fasterxml.jackson.module:jackson-module-jsonSchema:2.1.0"
    compile "com.fasterxml.jackson.module:jackson-module-scala_2.10:2.1.5"
    compile "commons-configuration:commons-configuration:1.7"
    compile "org.eclipse.jetty:jetty-servlets:8.1.10.v20130312"
    compile "com.couchbase.client:couchbase-client:1.4.1"
    compile "com.tesco.couchbase:couchbase-developer-build:1.0"
    compile "org.apache.commons:commons-lang3:3.3.1"
    compile "com.sun.jersey:jersey-client:1.17.1"
	compile "org.codehaus.groovy:groovy-all:2.1.3"
	compile "org.apache.activemq:activemq-all:5.11.0.1"
	compile "com.seebeyond:stcjms:1.0"
	compile "com.virutal.promotion.core:PromoUtility:1.0"
	
    
    testCompile "junit:junit:4.11"
    testCompile "org.mockito:mockito-all:1.9.5"
    testCompile "org.easytesting:fest-assert-core:2.0M10"
    testCompile "com.yammer.dropwizard:dropwizard-testing:0.6.2"
    testCompile "org.powermock:powermock-api-mockito:1.5.6"
    

    pmd "net.sourceforge.pmd:pmd:5.1.1"
}

mainClassName = 'com.virtual.services.PriceService'

fatJar {
    baseName = 'price-service'
    manifest {
        attributes 'Main-Class': mainClassName
    }
    exclude 'META-INF/.DSA', 'META-INF/.RSA', 'META-INF/*.SF'
}

task zip(type: Zip) {
    baseName = 'price-service'
    from fatJar.outputs.files
    from ('.'){
        include "*.yml"
        include 'runService'
        include 'version'
    }
}

def ignoreJacoco = []


jacoco {
    toolVersion = "0.7.1.201405082137"
    reportsDir = file("$buildDir/reports/jacoco")
}

jacocoTestReport {
    doFirst {
        classDirectories = fileTree(dir: "${buildDir}/classes/main/").exclude(ignoreJacoco)
    }
    reports {
        xml.enabled true
        csv.enabled true
        html.destination "${buildDir}/jacocoHtml"
    }
}

// ensure that test resources (src/test/resources) are added to CLASSPATH;
// see http://forums.gradle.org/gradle/topics/tests_arent_executed_when_setting_the_test_runtimeclasspath and
// http://gradle.org/docs/current/dsl/org.gradle.api.tasks.testing.Test.html#org.gradle.api.tasks.testing.Test:classpath

pmdMain {
    ignoreFailures = true
}

pmdTest {
    ignoreFailures = true
}

sourceSets {
    main {
        resources {
            exclude '*.*'
            exclude 'assets/**'
        }
    }
}

test {
    systemProperties 'environment': System.getProperty("environment")
    jvmArgs '-XX:-UseSplitVerifier'
    include '**/**'

    // set heap size for the test JVM(s)
    minHeapSize = "128m"
    maxHeapSize = "512m"
    
    jacoco {
        excludes = ignoreJacoco
        append = false
        destinationFile = file("$buildDir/jacoco/jacocoTest.exec")
        classDumpFile = file("$buildDir/jacoco/classpathdumps")
    }
}

run {
    def environment = System.getProperty('environment')
    if (!environment){
        environment = 'local'
    }
    args 'server', environment + '.yml'
}

task wrapper(type: Wrapper) {
    gradleVersion = '2.6'
}

idea{
    module{
        name = "PriceService"
    }

    project {
        jdkName = '1.7'
        languageLevel = '1.7'
    }
}

uploadArchives {
    repositories {
        mavenDeployer {
            repository(url: "https://localhost/nexus/content/repositories/thirdparty"){
            	authentication(userName: "", password: "")
            }
            pom.version = '1.0'
            pom.artifactId = 'price-service'
            pom.groupId = 'com.virtual.services'
        }
    }
}

applicationDefaultJvmArgs = ["-Dcom.sun.management.jmxremote=true","-Dcom.sun.management.jmxremote.port=5557","-Dcom.sun.management.jmxremote.authenticate=false","-Dcom.sun.management.jmxremote.ssl=false"]